- HTTP 프로토콜은 connectionless(클라이언트 요청에 응답 후 연결을 끊는 특징),
그리고 stateless(통신이 끝나면 상태를 유지하지 않는 특징) 으로 인해 클라이언트가
같은 사람이어도 누구인지 알아볼 수 없다. 이 문제를 해결하기 위해 쿠키와 세션을 이용해
클라이언트를 기억하는 것이다.

Session: 서버 측에 저장되는 사용자 정보 파일. 브라우저 종료시까지 인증이 유지된다.
유지 시간을 정할 경우 브라우저를 종료하지 않아도 시간 초과 후 인증이 종료된다. 로그인과 같은
보안이 중요한 작업 수행 시 세션을 이용한다. 그러나 속도는 쿠키에 비해 느리다(서버 측에서 정보를
처리하기 때문).

Cookie: 클라이언트(브라우저) 로컬에 저장되는 키와 값으로 이루어진 데이터 파일.
유지시간 등도 정의되어 있어 해당 유지 시간 동안은 브라우저가 종료되어도 인증이 유지된다.
보안이 덜 필요한 작업에 사용되며, 각 클라이언트의 로컬에 있는 정보이기 때문에 세션보다 요청 속도가 빠르다.

- 의존성 주입

의존성(Dependency): 하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것.
예를 들어 레스토랑은 서빙 직원이 없어도 돌아갈 수 있지만, 주방장이 없다면 장사를 할 수 없다.
이 때 '레스토랑은 주방장에 의존적'이라고 표현한다.

주입(Injection): 외부에서 밀어넣는 것. 즉 행위의 주체가 본인이 아닌 외부의 누군가임을 의미

의존성 주입(Dependency injection): 외부에서 필요한 객체를 집어넣는 것. 의존성을 주입할 경우
주입을 받는 입장에서는 어떤 객체인지 신경쓰지 않아도 되고, 어떤 객체를 주입받아도 소스의 수정이 필요하지 않게 된다
(유지보수가 쉽다/결합도(coupling)가 낮다).

- @Autowired 어노테이션을 활용한 세 가지 의존성 주입 방법

1. 생성자 주입 : 생성자를 통해 한 번에 의존성을 주입하는 방법. 생성자를 통해서만 값이 초기화될 수 있도록
필드 변수에 final을 넣어 준다. 오버라이딩한 생성자에서 this를 이용해 필드 변수를 초기화한다.

- 객체가 생성될 때 딱 한 번 호출되는 것이 보장되기 때문에, 의존 관계가 변하지 않는 경우에 사용한다.
- 의존 관계의 객체를 final로 선언하기 때문에, 누락이 발생하지 않는다(필드 변수가 초기화되지 않는 경우가 없다).
- 생성자가 하나 뿐이라면, @Autowired 어노테이션을 사용하지 않아도 된다. 

private final SqlSession sqlSession;

@Autowired
public MemberDAOImpl(SqlSession sqlSession) {
	this.sqlSession = sqlSession;
}

- 최근에 많이 사용하는 방법으로, @RequiredArgsConstructor(final 혹은 @NonNull이 붙은 변수 중 
초기화되지 않은 변수만을 사용해 생성자를 만들어 주는 어노테이션)를 사용해 간단하게 의존성 주입을 할 수 있다.

2. 세터 주입 : 세터를 통해 각각의 변수에 의존성을 주입하는 방법(생성자 주입과 달리 객체를 final로 선언하지 않는다).

- 세터는 객체 생성 이후에도 사용할 수 있기 때문에 선택적이고 변화 가능한 상황에서 사용한다.

@Setter(onMethod_ = { @Autowired })
private SqlSession sqlSession;

3. 필드 주입 : 필드에서 @Autowired 어노테이션만을 달아 의존성을 주입하는 방법.

- 사용하지 않는 것이 좋다.

@Autowired
private SqlSession sqlSession

- JSTL/EL

JSTL(JSP Standard Tag Library): JSP에서 사용되는 코어, 포맷팅, 함수, 데이터베이스, XML처리의 다섯가지 라이브러리의 묶음.
그 중 가장 빈번하게 쓰이는 core 라이브러리는 반복, 조건, 데이터관리, 데이터베이스 액세스, 
시간, 숫자, 날짜, 문자열 가공등을 사용할 수 있는 표준 라이브러리이다. EL(Expression Language)를 사용해 표현한다.

- 물론 라이브러리이기 때문에 pom.xml에 dependency 추가 후 사용해야 한다. jsp에서는 다음과 같이 선언하여 사용한다.

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

core 태그에서 자주 쓰이는 명령어는 다음의 링크에서 확인
https://hackersstudy.tistory.com/42